// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int        @id @default(autoincrement())
  username        String
  password        String
  email           String     @unique
  full_name       String
  profile_picture String?
  bio             String?
  website         String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  Post            Post[]
  Comment         Comment[]
  Like            Like[]
  Follower        Follower[] @relation("UserFollower")
  Following       Follower[] @relation("UserFollowing")

  @@map("user")
}

model Post {
  id        Int       @id @default(autoincrement())
  image_url String
  caption   String?
  location  String?
  createAt  DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  Comment   Comment[]
  Like      Like[]

  @@map("post")
}

model Comment {
  id           Int      @id @default(autoincrement())
  comment_text String
  createdAt    DateTime @default(now())
  updateAt     DateTime @updatedAt
  post         Post     @relation(fields: [postId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
  postId       Int
  userId       Int

  @@map("comment")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  postId    Int
  userId    Int
}

model Follower {
  id             Int  @id @default(autoincrement())
  user           User @relation("UserFollower", fields: [followerUserId], references: [id])
  following      User @relation("UserFollowing", fields: [userId], references: [id])
  followerUserId Int
  userId         Int
}
